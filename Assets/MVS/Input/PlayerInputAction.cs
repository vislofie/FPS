//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MVS/Input/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""4bbc2a75-3936-443e-a1b8-641d2caf4f5e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""d0f85634-8e98-48c8-85d4-fdc100407ec5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""604bc2ca-f942-4e98-9301-f05d0019c1fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""07a6ccfe-0b8a-4b01-b0d2-7de7a99bb488"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MovementVector"",
                    ""id"": ""d94e3bcb-c492-4191-86c4-97b49316874f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e65b765-785a-42a0-927c-42d4c603ee72"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e9fa52f-23d2-4837-9ae3-19304d54e3b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2d82b447-5167-496f-a39e-64a1e87379bc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a07b44bb-d582-4b8f-b9de-54c1719aab05"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""90ba3508-6640-4807-bd28-a5dbade59014"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7efedbf-548f-4959-8eb4-eb893de3d343"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Selecting Weapons"",
            ""id"": ""429a6f41-be8c-4ce3-85a3-86d7c3eb5914"",
            ""actions"": [
                {
                    ""name"": ""SelectFirst"",
                    ""type"": ""Button"",
                    ""id"": ""58b1685f-1b6b-4a5d-9998-6561fd5960ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSecond"",
                    ""type"": ""Button"",
                    ""id"": ""3e45d7c2-c8fe-4328-992e-d66927e7040e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectThird"",
                    ""type"": ""Button"",
                    ""id"": ""e19dc83c-7b71-4a88-adee-8fbaefed4b2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectFourth"",
                    ""type"": ""Button"",
                    ""id"": ""128be194-cac1-43ea-95a2-8cd0bea71493"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectFifth"",
                    ""type"": ""Button"",
                    ""id"": ""6a03fbe3-d68c-4a66-b7cd-9852f215a276"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ddb2dc4-eba7-4856-af5a-8a9968c038d5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectFirst"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35ac449e-b1fd-4d97-9bc3-eb6a3cab1630"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSecond"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""728ce48e-81cd-4170-8eed-b67adeaeda6e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectThird"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfb06e59-f52a-4e73-a9d4-705c9952ba3c"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectFourth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""920fb589-0f1d-42e8-8ad2-d3ee9c1c821c"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectFifth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Movement = m_Main.FindAction("Movement", throwIfNotFound: true);
        m_Main_Rotation = m_Main.FindAction("Rotation", throwIfNotFound: true);
        m_Main_Shoot = m_Main.FindAction("Shoot", throwIfNotFound: true);
        // Selecting Weapons
        m_SelectingWeapons = asset.FindActionMap("Selecting Weapons", throwIfNotFound: true);
        m_SelectingWeapons_SelectFirst = m_SelectingWeapons.FindAction("SelectFirst", throwIfNotFound: true);
        m_SelectingWeapons_SelectSecond = m_SelectingWeapons.FindAction("SelectSecond", throwIfNotFound: true);
        m_SelectingWeapons_SelectThird = m_SelectingWeapons.FindAction("SelectThird", throwIfNotFound: true);
        m_SelectingWeapons_SelectFourth = m_SelectingWeapons.FindAction("SelectFourth", throwIfNotFound: true);
        m_SelectingWeapons_SelectFifth = m_SelectingWeapons.FindAction("SelectFifth", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_Movement;
    private readonly InputAction m_Main_Rotation;
    private readonly InputAction m_Main_Shoot;
    public struct MainActions
    {
        private @PlayerInputAction m_Wrapper;
        public MainActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Main_Movement;
        public InputAction @Rotation => m_Wrapper.m_Main_Rotation;
        public InputAction @Shoot => m_Wrapper.m_Main_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);

    // Selecting Weapons
    private readonly InputActionMap m_SelectingWeapons;
    private List<ISelectingWeaponsActions> m_SelectingWeaponsActionsCallbackInterfaces = new List<ISelectingWeaponsActions>();
    private readonly InputAction m_SelectingWeapons_SelectFirst;
    private readonly InputAction m_SelectingWeapons_SelectSecond;
    private readonly InputAction m_SelectingWeapons_SelectThird;
    private readonly InputAction m_SelectingWeapons_SelectFourth;
    private readonly InputAction m_SelectingWeapons_SelectFifth;
    public struct SelectingWeaponsActions
    {
        private @PlayerInputAction m_Wrapper;
        public SelectingWeaponsActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectFirst => m_Wrapper.m_SelectingWeapons_SelectFirst;
        public InputAction @SelectSecond => m_Wrapper.m_SelectingWeapons_SelectSecond;
        public InputAction @SelectThird => m_Wrapper.m_SelectingWeapons_SelectThird;
        public InputAction @SelectFourth => m_Wrapper.m_SelectingWeapons_SelectFourth;
        public InputAction @SelectFifth => m_Wrapper.m_SelectingWeapons_SelectFifth;
        public InputActionMap Get() { return m_Wrapper.m_SelectingWeapons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectingWeaponsActions set) { return set.Get(); }
        public void AddCallbacks(ISelectingWeaponsActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectingWeaponsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectingWeaponsActionsCallbackInterfaces.Add(instance);
            @SelectFirst.started += instance.OnSelectFirst;
            @SelectFirst.performed += instance.OnSelectFirst;
            @SelectFirst.canceled += instance.OnSelectFirst;
            @SelectSecond.started += instance.OnSelectSecond;
            @SelectSecond.performed += instance.OnSelectSecond;
            @SelectSecond.canceled += instance.OnSelectSecond;
            @SelectThird.started += instance.OnSelectThird;
            @SelectThird.performed += instance.OnSelectThird;
            @SelectThird.canceled += instance.OnSelectThird;
            @SelectFourth.started += instance.OnSelectFourth;
            @SelectFourth.performed += instance.OnSelectFourth;
            @SelectFourth.canceled += instance.OnSelectFourth;
            @SelectFifth.started += instance.OnSelectFifth;
            @SelectFifth.performed += instance.OnSelectFifth;
            @SelectFifth.canceled += instance.OnSelectFifth;
        }

        private void UnregisterCallbacks(ISelectingWeaponsActions instance)
        {
            @SelectFirst.started -= instance.OnSelectFirst;
            @SelectFirst.performed -= instance.OnSelectFirst;
            @SelectFirst.canceled -= instance.OnSelectFirst;
            @SelectSecond.started -= instance.OnSelectSecond;
            @SelectSecond.performed -= instance.OnSelectSecond;
            @SelectSecond.canceled -= instance.OnSelectSecond;
            @SelectThird.started -= instance.OnSelectThird;
            @SelectThird.performed -= instance.OnSelectThird;
            @SelectThird.canceled -= instance.OnSelectThird;
            @SelectFourth.started -= instance.OnSelectFourth;
            @SelectFourth.performed -= instance.OnSelectFourth;
            @SelectFourth.canceled -= instance.OnSelectFourth;
            @SelectFifth.started -= instance.OnSelectFifth;
            @SelectFifth.performed -= instance.OnSelectFifth;
            @SelectFifth.canceled -= instance.OnSelectFifth;
        }

        public void RemoveCallbacks(ISelectingWeaponsActions instance)
        {
            if (m_Wrapper.m_SelectingWeaponsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectingWeaponsActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectingWeaponsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectingWeaponsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectingWeaponsActions @SelectingWeapons => new SelectingWeaponsActions(this);
    public interface IMainActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface ISelectingWeaponsActions
    {
        void OnSelectFirst(InputAction.CallbackContext context);
        void OnSelectSecond(InputAction.CallbackContext context);
        void OnSelectThird(InputAction.CallbackContext context);
        void OnSelectFourth(InputAction.CallbackContext context);
        void OnSelectFifth(InputAction.CallbackContext context);
    }
}
